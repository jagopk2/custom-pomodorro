{"version":3,"sources":["reducers/reducer.js","context/PomodoroContext.js","components/task-components/TaskType.js","components/task-components/TaskDetails.js","utils/date.js","utils/useTimer.js","images/motivation1.mp3","images/wn.mp3","components/task-components/EndTime.js","images/ring.mp3","components/task-components/TaskTimer.js","images/walpaper.jpg","components/MainTask.js","App.js","reportWebVitals.js","index.js"],"names":["reducer","state","arguments","length","undefined","action","console","group","type","log","groupEnd","tasks","map","row","id","_objectSpread","timerStarted","activeTaskId","timeLeft","concat","_toConsumableArray","task","taskNo","taskCount","completed","filter","PomodoroContext","createContext","initialState","init","initial","gridState","JSON","parse","localStorage","getItem","PomodoroProvider","_ref","children","_useReducer","useReducer","_useReducer2","_slicedToArray","dispatch","_jsx","Provider","value","TaskType","memo","props","pomodoroType","setPomodoroType","_useState","useState","_useState2","showAlert","setShowAlert","_jsxs","_Fragment","ToggleButtonGroup","sx","color","exclusive","onChange","event","newValue","setTimeout","ToggleButton","Alert","severity","TaskDetails","pomodosroType","theme","isPomodoroTypeSelected","isRevisionTypeSelected","emoji","textContent","className","style","background","fontWeight","fontSize","padStartWithZeros","totalStringSize","toString","padStart","useTimer","initialSeconds","taskCompletedCallback","seconds","setSeconds","useEffect","timer","setInterval","clearInterval","EndTime","endTimeDelta","buttonColor","setTimerStarted","useContext","_useContext2","timerContext","short","long","study","revise","whiteNoise","motivation","audio","setAudio","endTime","Date","pause","currentTime","setMinutes","getMinutes","Math","round","endTimeString","date","serialised","getHours","join","serialiseDate","Button","disableElevation","onClick","newAudio","Audio","motivation1","play","wn","variant","startIcon","StopIcon","PlayArrowIcon","TaskTimer","stateTimerStarted","setStateTimerStarted","callback","useCallback","_useTimer","_useTimer2","showNotification","title","message","ring","window","Notification","requestPermission","then","permission","notification","body","icon","volume","close","timerString","floor","formatSecondsIntoMinutesAndSeconds","prev","ACTIVE_TASK_DEFAULT","MainTask","_useContext","activeTask","setActiveTask","_useState3","_useState4","themes","backgroundImage","getQuote","require","React","defaultTimerValue","bell","quotes","App","useRef","useMemo","pomodoro","foreground","short_break","long_break","revision","savedTimerValues","initialTimerValue","setItem","stringify","quote","getRandomQuote","text","author","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAgDeA,EAhDC,WAAyB,IAAxBC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAMH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAI/B,OAHAE,QAAQC,MAAMF,EAAOG,MACrBF,QAAQG,IAAI,gBAAiBJ,GAC7BC,QAAQI,SAASL,EAAOG,MAChBH,EAAOG,MACX,IAAK,gBACD,MAAO,CACHG,MAAOV,EAAMU,MAAMC,KAAI,SAAAC,GACnB,OAAIA,EAAIC,KAAOT,EAAOS,GAAWD,EACjCE,wBAAA,GAAYF,GAAG,IAAEG,cAAc,OAEnCC,aAAcZ,EAAOS,IAE7B,IAAK,gBACD,OAAAC,wBAAA,GACOd,GAAK,IAAEU,MAAOV,EAAMU,MAAMC,KAAI,SAAAC,GAC7B,OAAIA,EAAIC,KAAOT,EAAOS,GAAWD,EACjCE,wBAAA,GAAYF,GAAG,IAAEG,cAAc,EAAOE,SAAUb,EAAOa,gBAGnE,IAAK,aACD,OAAAH,wBAAA,GACOd,GAAK,IACRU,MAAM,GAADQ,OAAAC,YAAMnB,EAAMU,OAAK,CAAE,CACpBG,GAAIT,EAAOS,GACXO,KAAMhB,EAAOgB,KACbC,OAAQjB,EAAOiB,OACfC,UAAWlB,EAAOkB,UAClBP,cAAc,EACdQ,WAAW,EACXN,SAAU,UAGtB,IAAK,eACD,MAAO,CAAEP,MAAOV,EAAMU,MAAMc,QAAO,SAACZ,GAAG,OAAKA,EAAIC,KAAOT,EAAOS,MAAKG,cAAe,GACtF,IAAK,iBACD,OAAAF,wBAAA,GACOd,GAAK,IAAEU,MAAOV,EAAMU,MAAMC,KAAI,SAAAC,GAC7B,OAAIA,EAAIC,KAAOT,EAAOS,GAAWD,EACjCE,wBAAA,GAAYF,GAAG,IAAEW,WAAW,EAAMR,cAAc,EAAOE,SAAU,SAG7E,IAAK,uBACD,OAAAH,wBAAA,GAAYd,GAAK,IAAEgB,cAAe,IACtC,QACI,OAAOhB,I,OC1CNyB,EAAkBC,0BAEzBC,EAAe,CACjBjB,MAAO,GACPM,cAAe,GAQbY,EAAO,SAACC,GACV,IAAMC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,cAClD,OAAIJ,GAGGD,GAGEM,EAAmB,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAC/BC,EAA0BC,qBAAWxC,EAAS4B,EAAcC,GAAKY,EAAAC,YAAAH,EAAA,GAA1DtC,EAAKwC,EAAA,GAAEE,EAAQF,EAAA,GACd9B,EAAwBV,EAAxBU,MAAOM,EAAiBhB,EAAjBgB,aAEf,OAAQ2B,cAAClB,EAAgBmB,SAAQ,CAACC,MAAO,CAAEnC,QAAOgC,WAAU1B,gBAAeqB,SACtEA,K,wBCcMS,EAxCEC,gBAAK,SAACC,GACrB,IAAQjC,EAAgDiC,EAAhDjC,aAAckC,EAAkCD,EAAlCC,aAAcC,EAAoBF,EAApBE,gBACpCC,EAAkCC,oBAAS,GAAMC,EAAAZ,YAAAU,EAAA,GAA1CG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAgB9B,OACEG,eAAAC,WAAA,CAAApB,SAAA,CACEmB,eAACE,IAAiB,CAChBC,GAAI,CAAE,0BAA2B,CAAEC,MAAO,qBAC1Cf,MAAOI,EACPY,WAAW,EACXC,SApBW,SAACC,EAAOC,GACvB,GAAKA,EACL,OAAIjD,GACFwC,GAAa,QAEbU,YAAW,WACTV,GAAa,KACZ,WAGLL,EAAgBc,IAUO3B,SAAA,CAEnBM,cAACuB,IAAY,CAACrB,MAAM,WAAUR,SAAC,aAC/BM,cAACuB,IAAY,CAACrB,MAAM,WAAUR,SAAC,aAC/BM,cAACuB,IAAY,CAACrB,MAAM,cAAaR,SAAC,gBAClCM,cAACuB,IAAY,CAACrB,MAAM,aAAYR,SAAC,kBAElCiB,GACCX,cAACwB,IAAK,CAACC,SAAS,UAAS/B,SAAC,2DCVnBgC,EAtBKtB,gBAAK,SAACC,GACtB,IAAQsB,EAA+BtB,EAA/BsB,cAAeC,EAAgBvB,EAAhBuB,MAAOnD,EAAS4B,EAAT5B,KACxBoD,EAA2C,aAAlBF,EACzBG,EAA2C,aAAlBH,EACzBI,EAAQF,EAAyB,eAAQC,EAAyB,eAAO,eACzEE,EAAcH,EAChBpD,EAAI,cAAAF,OAAiBE,GAAS,iBAC7BqD,EAAyB,kBAAoB,oBAElD,OACIjB,eAAA,OAAKoB,UAAU,iBAAgBvC,SAAA,CAC3BM,cAAA,QAAAN,SAAOqC,IACPlB,eAAA,QAAMqB,MAAO,CAAEjB,MAAOW,EAAMO,YAAazC,SAAA,CACpCsC,EACAvD,GAAQoD,GACL7B,cAAA,OAAKkC,MAAO,CAAEE,WAAY,SAAUC,SAAU,IAAK3C,SAAEjB,aCLzE,SAAS6D,EAAkBpC,EAAOqC,GAC9B,OAAOrC,EAAMsC,WAAWC,SAASF,EAAiB,KCXtD,IA4BeG,EA5BE,SAACtE,EAAcuE,EAAgBC,GAE5C,IAAApC,EAA8BC,mBAASkC,GAAejC,EAAAZ,YAAAU,EAAA,GAA/CqC,EAAOnC,EAAA,GAAEoC,EAAUpC,EAAA,GAuB1B,OArBAqC,qBAAU,WACN,IAAIC,EAcJ,OAZI5E,IACgB,IAAZyE,EACAD,IACOC,EAAU,IACjBG,EAAQC,aAAY,WAGhBH,EAAWD,EAAU,KACtB,OAIJ,WACCG,GAASE,cAAcF,MAGhC,CAAC5E,EAAcyE,EAASD,IAEpB,CAACC,EAASC,I,0CC3BN,MAA0B,wCCA1B,MAA0B,+BC6G1BK,EAlGC/C,gBAAK,SAACC,GACpB,IAeI+C,EAdF9C,EAOED,EAPFC,aACA+C,EAMEhD,EANFgD,YACAjF,EAKEiC,EALFjC,aACAkF,EAIEjD,EAJFiD,gBACApF,EAGEmC,EAHFnC,GACAI,EAEE+B,EAFF/B,SACAuE,EACExC,EADFwC,QAEM9C,EAAawD,qBAAWzE,GAAxBiB,SACRyD,EACED,qBAAWE,GADLC,EAAKF,EAALE,MAAOC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAML,EAANK,OAAQC,EAAUN,EAAVM,WAAYC,EAAUP,EAAVO,WAEhDvD,EAA0BC,mBAAS,MAAKC,EAAAZ,YAAAU,EAAA,GAAjCwD,EAAKtD,EAAA,GAAEuD,EAAQvD,EAAA,GAEhBwD,EAAU,IAAIC,KAGpBpB,qBAAU,WACRO,GAAgB,GACZU,IACFA,EAAMI,QACNJ,EAAMK,YAAc,KAErB,CAAC/D,IAEiB,aAAjBA,EACF8C,EAAe9E,GAAsBsF,EACX,gBAAjBtD,EACT8C,EAAeM,EACW,eAAjBpD,EACT8C,EAAeO,EACW,aAAjBrD,IACT8C,EAAeS,GAGjBK,EAAQI,WAAWJ,EAAQK,aAAeC,KAAKC,MAAMrB,EAAe,KACpE,IAAMsB,EJ3CD,SAAuBC,GAC1B,IAAIC,EAAa,CAACD,EAAKE,WAAYvC,EAAkBqC,EAAKJ,aAAc,IAAIO,KAAK,KAGjF,OAFAF,GAAcD,EAAKE,YAAc,GAAK,KAAO,MIyCzBE,CAAcb,GAqCpC,OACErD,eAAA,OAAKoB,UAAU,sBAAqBvC,SAAA,CAClCM,cAACgF,IAAM,CACLC,kBAAgB,EAChBjE,GAAI,CAAEC,MAAOoC,GACb6B,QAxCiB,WASrB,GANAxH,QAAQG,IAAImG,EAAO5F,GACf4F,IACFA,EAAMI,QACNJ,EAAMK,YAAc,GAGjBjG,EAcM4F,GACTA,EAAMI,aAbN,GACoB,aAAjB9D,GAAgD,aAAjBA,IAChCwD,GAKK,GAAqB,gBAAjBxD,GAAkCyD,EAAY,CACvD,IAAMoB,EAAW,IAAIC,MAAMC,GAC3BpB,EAASkB,GACTA,EAASG,YAPT,CACA,IAAMH,EAAW,IAAIC,MAAMG,GAC3BtB,EAASkB,GACTA,EAASG,QAUD,IAARpH,GAEE6B,EADJ3B,EACa,CAAER,KAAM,gBAAiBM,KAAII,SAAUuE,GACvC,CAAEjF,KAAM,gBAAiBM,OAExCoF,GAAiBlF,IASboH,QAAQ,YACRC,UACErH,EACE4B,cAAC0F,IAAQ,CAACrD,SAAS,WAEnBrC,cAAC2F,IAAa,CAACtD,SAAS,WAE3B3C,SAEAtB,EAAe,OAAS,UAE3ByC,eAAA,QAAAnB,SAAA,CAAM,WACIM,cAAA,QAAAN,SAAOgF,aCvGR,MAA0B,iCCuE1BkB,EAjEGxF,gBAAK,SAACC,GACtB,IAAQC,EAAoDD,EAApDC,aAAcsB,EAAsCvB,EAAtCuB,MAAOtD,EAA+B+B,EAA/B/B,SAAUJ,EAAqBmC,EAArBnC,GAAIE,EAAiBiC,EAAjBjC,aAE3CoC,EAAkDC,mBAASrC,GAAasC,EAAAZ,YAAAU,EAAA,GAAjEqF,EAAiBnF,EAAA,GAAEoF,EAAoBpF,EAAA,GAExCqF,EAAWC,uBAAY,WAC3BF,GAAqB,KACpB,IAEHG,EAA8BvD,EAASmD,EAAmBvH,EAAUyH,GAASG,EAAApG,YAAAmG,EAAA,GAAtEpD,EAAOqD,EAAA,GAAEpD,EAAUoD,EAAA,GAE1BnD,qBAAU,WACR+C,EAAqB1H,KACpB,CAACA,IAEJ2E,qBAAU,WACRD,EAAWxE,KACV,CAACJ,EAAII,EAAUwE,IAElBC,qBAAU,WACQ,IAAZF,GACFsD,EAAiB,iBAAiB,cAAD5H,OAAgB+B,EAAY,WAG9D,CAACuC,IAGJ,IAAMsD,EAAmB,SAACC,EAAOC,GACjB,IAAIjB,MAAMkB,GAClBhB,OACF,iBAAkBiB,QACpBC,aAAaC,oBAAoBC,MAAK,SAACC,GACrC,GAAmB,YAAfA,EAA0B,CAC5B,IAAMC,EAAe,IAAIJ,aAAaJ,EAAO,CAC3CS,KAAMR,EACNS,KAAM,iCACNC,OAAQ,IAIVzF,YAAW,WACTsF,EAAaI,UACZ,UAMLC,ENtCD,SAA4C/G,GAC/C,IAAM2C,EAAUP,EAAkBpC,EAAQ,GAAI,GAE9C,MAAO,CADSoC,EAAkBkC,KAAK0C,MAAMhH,EAAQ,IAAK,GACzC2C,GAASiC,KAAK,KMmCbqC,CAAmCtE,GACvD,OACEhC,eAAAC,WAAA,CAAApB,SAAA,CACEM,cAAA,OAAKiC,UAAU,cAAavC,SAAEuH,IAC9BjH,cAACmD,EAAO,CACNE,YAAazB,EAAMO,WACnB/D,aAAcyH,EACdvC,gBAAiB,SAAC8D,GAAI,OAAKtB,EAAqBsB,IAChDlJ,GAAIA,EACJI,SAAUA,EACVuE,QAASA,EACTvC,aAAcA,UCjEP,MAA0B,qCCQnC+G,EAAsB,CAAEnJ,IAAK,EAAGI,SAAU,KAAMF,cAAc,GAwFrDkJ,EAtFElH,gBAAK,SAACC,GACrB,IAAAkH,EAA0ChE,qBAAWzE,GAA7CT,EAAYkJ,EAAZlJ,aAAcN,EAAKwJ,EAALxJ,MAAOgC,EAAQwH,EAARxH,SAC7BS,EAAoCC,mBAAS4G,GAAoB3G,EAAAZ,YAAAU,EAAA,GAA1DgH,EAAU9G,EAAA,GAAE+G,EAAa/G,EAAA,GAChCgH,EAAwCjH,mBAAS,YAAWkH,EAAA7H,YAAA4H,EAAA,GAArDpH,EAAYqH,EAAA,GAAEpH,EAAeoH,EAAA,GAC5BrJ,EACNkJ,EADMlJ,SAAUJ,EAChBsJ,EADgBtJ,GAAIO,EACpB+I,EADoB/I,KAAMC,EAC1B8I,EAD0B9I,OAAQC,EAClC6I,EADkC7I,UAAWP,EAC7CoJ,EAD6CpJ,aAAcQ,EAC3D4I,EAD2D5I,UAErDgJ,EAAWvH,EAAXuH,OACRpE,EAAuCD,qBAAWE,GAA1CC,EAAKF,EAALE,MAAOC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAML,EAANK,OAmD5B,OAlDAnG,QAAQG,IAAIwC,GAGZ0C,qBAAU,YACc,IAAlB1E,GACFoJ,EAAc1J,EAAMc,QAAO,SAACZ,GAAG,OAAKA,EAAIC,KAAOG,KAAc,MAG9D,CAACA,EAAcN,IAGlBgF,qBAAU,WACJnE,GACF2B,EAAgB,iBAEjB,CAAC3B,IAGJmE,qBAAU,YAEN7E,IACQ,IAARA,GACkB,eAAjBoC,GAAkD,gBAAjBA,GAAmD,aAAjBA,IAEpEP,EAAS,CAAEnC,KAAM,yBACjB6J,EAAcJ,MAEf,CAAC/G,EAAcpC,EAAI6B,IAEtBgD,qBAAU,YACI,IAAR7E,IACmB,aAAjBoC,EACFmH,GAAc,SAAChJ,GAAI,OAAAN,wBAAA,GAAWM,GAAI,IAAEH,SAAUsF,OACpB,gBAAjBtD,EACTmH,GAAc,SAAChJ,GAAI,OAAAN,wBAAA,GAAWM,GAAI,IAAEH,SAAUoF,OACpB,eAAjBpD,EACTmH,GAAc,SAAChJ,GAAI,OAAAN,wBAAA,GAAWM,GAAI,IAAEH,SAAUqF,OACpB,aAAjBrD,GACTmH,GAAc,SAAChJ,GAAI,OAAAN,wBAAA,GAAWM,GAAI,IAAEH,SAAUuF,UAGjD,CAACvD,EAAcpC,IAGlB6E,qBAAU,YACc,IAAlB1E,GACFkC,EAAgB,cAEjB,CAAClC,IAGF2B,cAAA,OACEiC,UAAU,uBACVC,MAAO,CAAE2F,gBAAgB,OAADtJ,OAAS4D,EAAU,MAAMzC,SAEjDmB,eAAA,OAAKoB,UAAU,sBAAqBvC,SAAA,CAClCM,cAACG,EAAQ,CACP/B,aAAcA,EACdkC,aAAcA,EACdC,gBAAiB,SAAC3C,GAAI,OAAK2C,EAAgB3C,MAE7CoC,cAAC0B,EAAW,CACVC,cAAerB,EACfpC,GAAIA,EACJ0D,MAAOgG,EAAOtH,GACd7B,KAAMA,EAAI,GAAAF,OAAME,EAAI,MAAAF,OAAKG,EAAM,KAAAH,OAAII,EAAS,UAAMnB,IAEpDwC,cAAC4F,EAAS,CACRtH,SAAUA,EACVJ,GAAIA,EACJE,aAAcA,EACdkC,aAAcA,EACdsB,MAAOgG,EAAOtH,aCpFlBwH,G,MAAWC,EAAQ,KAEZtE,EAAeuE,IAAMjJ,gBAE5BkJ,EAAoB,CACxBrE,MAAO,KACPF,MAAO,IACPC,KAAM,IACNE,OAAQ,IACRqE,MAAM,EACNtB,cAAc,EACd9C,YAAY,EACZC,YAAY,EACZoE,QAAQ,GAkEKC,EA/DH,WACMC,iBAAO,MAAvB,IAEMT,EAASU,mBACb,iBAAO,CACLC,SAAU,CACRC,WAAY,UACZrG,WAAY,WAEdsG,YAAa,CACXD,WAAY,UACZrG,WAAY,WAEduG,WAAY,CACVF,WAAY,UACZrG,WAAY,WAEdvD,UAAW,CACT4J,WAAY,UACZrG,WAAY,WAEdwG,SAAU,CACRH,WAAY,UACZrG,WAAY,cAGhB,IAIIyG,EAAmBxJ,KAAKC,MAAMC,aAAaC,QAAQ,gBAGnDsJ,EAAoBD,GAAoBX,EAG9ClF,qBAAU,WACH6F,GACHtJ,aAAawJ,QAAQ,cAAe1J,KAAK2J,UAAUd,MAEpD,IAEH,IAAMe,EAAQlB,EAASmB,iBAEvB,OACEjJ,cAAAc,WAAA,CAAApB,SACEmB,eAAC4C,EAAaxD,SAAQ,CAACC,MAAO2I,EAAkBnJ,SAAA,CAC9CM,cAACR,EAAgB,CAAAE,SACfM,cAACsH,EAAQ,CAACM,OAAQA,MAEpB5H,cAAA,OAAKiC,UAAU,kBAAiBvC,SAC9BmB,eAAA,OAAKoB,UAAU,QAAOvC,SAAA,CACpBM,cAAA,KAAAN,SACEM,cAAA,KAAAN,SAAIsJ,EAAME,SAEZlJ,cAAA,OAAKiC,UAAU,SAAQvC,SAAEsJ,EAAMG,oBCjE5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,SAAAjH,GAAkD,IAA/C8J,EAAM9J,EAAN8J,OAAQC,EAAM/J,EAAN+J,OAAQC,EAAMhK,EAANgK,OAAQC,EAAMjK,EAANiK,OAAQC,EAAOlK,EAAPkK,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP7J,cAACgI,IAAM8B,WAAU,CAAApK,SACbM,cAACoI,EAAG,MAER2B,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c8cb3e67.chunk.js","sourcesContent":["const reducer = (state = {}, action) => {\n    console.group(action.type);\n    console.log('dispatching: ', action);\n    console.groupEnd(action.type);\n    switch (action.type) {\n        case 'started_timer':\n            return {\n                tasks: state.tasks.map(row => {\n                    if (row.id !== action.id) return row;\n                    return { ...row, timerStarted: true };\n                }),\n                activeTaskId: action.id,\n            };\n        case 'stopped_timer':\n            return {\n                ...state, tasks: state.tasks.map(row => {\n                    if (row.id !== action.id) return row;\n                    return { ...row, timerStarted: false, timeLeft: action.timeLeft }\n                })\n            }\n        case 'added_task':\n            return {\n                ...state,\n                tasks: [...state.tasks, {\n                    id: action.id,\n                    task: action.task,\n                    taskNo: action.taskNo,\n                    taskCount: action.taskCount,\n                    timerStarted: false,\n                    completed: false,\n                    timeLeft: 1500\n                }]\n            }\n        case 'deleted_task':\n            return { tasks: state.tasks.filter((row) => row.id !== action.id), activeTaskId: -1 };\n        case 'completed_task':\n            return {\n                ...state, tasks: state.tasks.map(row => {\n                    if (row.id !== action.id) return row;\n                    return { ...row, completed: true, timerStarted: false, timeLeft: 0 }\n                })\n            };\n        case 'resetted_active_task':\n            return { ...state, activeTaskId: -1 }\n        default:\n            return state;\n    }\n}\nexport default reducer;","import { useReducer, createContext } from 'react';\nimport reducer from \"../reducers/reducer\";\n\nexport const PomodoroContext = createContext();\n\nconst initialState = {\n    tasks: [],\n    activeTaskId: -1\n};\n\n/**\n * Before the Grid Component is rendered, check if there is any saved data in local storage and initialise\n * the state with it.\n * Alternatively, you can implement this logic inside the onGridReady event on the Grid Component\n */\nconst init = (initial) => {\n    const gridState = JSON.parse(localStorage.getItem('gridState'));\n    if (gridState) {\n        return gridState;\n    }\n    return initial;\n}\n\nexport const PomodoroProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState, init);\n    const { tasks, activeTaskId } = state;\n\n    return (<PomodoroContext.Provider value={{ tasks, dispatch, activeTaskId }}>\n        {children}\n    </PomodoroContext.Provider>\n    );\n}","import { Alert, ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport { useState, memo } from \"react\";\nconst TaskType = memo((props) => {\n  const { timerStarted, pomodoroType, setPomodoroType } = props;\n  const [showAlert, setShowAlert] = useState(false);\n\n  const onChange = (event, newValue) => {\n    if (!newValue) return;\n    if (timerStarted) {\n      setShowAlert(true);\n\n      setTimeout(() => {\n        setShowAlert(false);\n      }, 3000);\n      return;\n    }\n    setPomodoroType(newValue);\n  };\n\n  // https://mui.com/components/button-group/\n  return (\n    <>\n      <ToggleButtonGroup\n        sx={{ \"& .MuiToggleButton-root\": { color: \"white !important\" } }}\n        value={pomodoroType}\n        exclusive={true}\n        onChange={onChange}\n      >\n        <ToggleButton value=\"pomodoro\">Pomodoro</ToggleButton>\n        <ToggleButton value=\"revision\">Revision</ToggleButton>\n        <ToggleButton value=\"short_break\">Short Break</ToggleButton>\n        <ToggleButton value=\"long_break\">Long Break</ToggleButton>\n      </ToggleButtonGroup>\n      {showAlert && (\n        <Alert severity=\"warning\">\n          Please stop the timer before clicking an action.\n        </Alert>\n      )}\n    </>\n  );\n});\n\nexport default TaskType;\n","import { memo } from 'react';\n\nconst TaskDetails = memo((props) => {\n    const { pomodosroType, theme, task } = props;\n    const isPomodoroTypeSelected = pomodosroType === \"pomodoro\";\n    const isRevisionTypeSelected = pomodosroType === \"revision\";\n    const emoji = isPomodoroTypeSelected ? '📌' : (isRevisionTypeSelected ? '📚' : '🕺');\n    const textContent = isPomodoroTypeSelected ? (\n        task ? `Working on ${task}` : \"Time to focus!\"\n    ) : (isRevisionTypeSelected ? \"Time to revise!\" : \"Time for a break!\");\n\n    return (\n        <div className=\"task-container\">\n            <span>{emoji}</span>\n            <span style={{ color: theme.background }}>\n                {textContent}\n                {task && isPomodoroTypeSelected && (\n                    <div style={{ fontWeight: 'normal', fontSize: 20 }}>{task}</div>\n                )}\n            </span>\n        </div>\n    );\n});\n\nexport default TaskDetails;\n","/**\n * Serialises a Date to a string of format `HH:mm am/pm`.\n * from https://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format\n * @param date The date to serialise.\n */\nexport function serialiseDate(date) {\n    let serialised = [date.getHours(), padStartWithZeros(date.getMinutes(), 2)].join(':');\n    serialised += date.getHours() >= 12 ? 'pm' : 'am';\n\n    return serialised;\n}\n\nfunction padStartWithZeros(value, totalStringSize) {\n    return value.toString().padStart(totalStringSize, '0');\n}\n\nexport function formatSecondsIntoMinutesAndSeconds(value) {\n    const seconds = padStartWithZeros(value % 60, 2);\n    const minutes = padStartWithZeros(Math.floor(value / 60), 2);\n    return [minutes, seconds].join(':');\n}","import { useEffect, useState } from \"react\";\n\nconst useTimer = (timerStarted, initialSeconds, taskCompletedCallback) => {\n\n    const [seconds, setSeconds] = useState(initialSeconds);\n\n    useEffect(() => {\n        let timer;\n\n        if (timerStarted) {\n            if (seconds === 0) {\n                taskCompletedCallback()\n            } else if (seconds > 0) {\n                timer = setInterval(() => {\n                    // could have used setSeconds(prev => prev - 1) and removed the seconds dependency\n                    // but this can lead to the timers being out of sync\n                    setSeconds(seconds - 1)\n                }, 1000);\n            }\n        }\n\n        return () => {\n            if (timer) { clearInterval(timer); };\n        }\n\n    }, [timerStarted, seconds, taskCompletedCallback]);\n\n    return [seconds, setSeconds];\n};\n\nexport default useTimer;","export default __webpack_public_path__ + \"static/media/motivation1.76cc0618.mp3\";","export default __webpack_public_path__ + \"static/media/wn.aef8018f.mp3\";","import { Button } from \"@mui/material\";\nimport { memo, useContext, useEffect, useState } from \"react\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport StopIcon from \"@mui/icons-material/Stop\";\nimport { serialiseDate } from \"../../utils/date\";\nimport { PomodoroContext } from \"../../context/PomodoroContext\";\nimport { timerContext } from \"../../App\";\nimport motivation1 from \"../../images/motivation1.mp3\";\nimport wn from \"../../images/wn.mp3\";\n\n\nconst EndTime = memo((props) => {\n  const {\n    pomodoroType,\n    buttonColor,\n    timerStarted,\n    setTimerStarted,\n    id,\n    timeLeft,\n    seconds,\n  } = props;\n  const { dispatch } = useContext(PomodoroContext);\n  const { short, long, study, revise, whiteNoise, motivation } =\n    useContext(timerContext);\n  const [audio, setAudio] = useState(null);\n\n  const endTime = new Date();\n  let endTimeDelta;\n\n  useEffect(() => {\n    setTimerStarted(false);\n    if (audio) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n  }, [pomodoroType]);\n\n  if (pomodoroType === \"pomodoro\") {\n    endTimeDelta = timeLeft ? timeLeft : study;\n  } else if (pomodoroType === \"short_break\") {\n    endTimeDelta = short;\n  } else if (pomodoroType === \"long_break\") {\n    endTimeDelta = long;\n  } else if (pomodoroType === \"revision\") {\n    endTimeDelta = revise; // Use the revise timer value\n  }\n\n  endTime.setMinutes(endTime.getMinutes() + Math.round(endTimeDelta / 60));\n  const endTimeString = serialiseDate(endTime);\n\n  const onClickHandler = () => {\n    // Stop any previously playing audio\n    // Stop any previously playing audio\n    console.log(audio, timerStarted);\n    if (audio) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n\n    if (!timerStarted) {\n      // Play the appropriate sound based on the timer type\n      if (\n        (pomodoroType === \"pomodoro\" || pomodoroType === \"revision\") &&\n        whiteNoise\n      ) {\n        const newAudio = new Audio(wn);\n        setAudio(newAudio);\n        newAudio.play();\n      } else if (pomodoroType === \"short_break\" && motivation) {\n        const newAudio = new Audio(motivation1);\n        setAudio(newAudio);\n        newAudio.play();\n      }\n    } else if (audio) {\n      audio.pause();\n    }\n\n    if (id !== -1) {\n      timerStarted\n        ? dispatch({ type: \"stopped_timer\", id, timeLeft: seconds })\n        : dispatch({ type: \"started_timer\", id });\n    }\n    setTimerStarted(!timerStarted);\n  };\n\n  return (\n    <div className=\"end-timer-container\">\n      <Button\n        disableElevation\n        sx={{ color: buttonColor }}\n        onClick={onClickHandler}\n        variant=\"contained\"\n        startIcon={\n          timerStarted ? (\n            <StopIcon fontSize=\"medium\" />\n          ) : (\n            <PlayArrowIcon fontSize=\"medium\" />\n          )\n        }\n      >\n        {timerStarted ? \"STOP\" : \"START\"}\n      </Button>\n      <span>\n        end time<span>{endTimeString}</span>\n      </span>\n    </div>\n  );\n});\n\nexport default EndTime;\n","export default __webpack_public_path__ + \"static/media/ring.10c62103.mp3\";","import { useState, useEffect, useCallback, memo } from \"react\";\nimport { formatSecondsIntoMinutesAndSeconds } from \"../../utils/date\";\nimport useTimer from \"../../utils/useTimer\";\nimport EndTime from \"./EndTime\";\nimport ring from '../../images/ring.mp3'\n\nconst TaskTimer = memo((props) => {\n  const { pomodoroType, theme, timeLeft, id, timerStarted } = props;\n\n  const [stateTimerStarted, setStateTimerStarted] = useState(timerStarted);\n\n  const callback = useCallback(() => {\n    setStateTimerStarted(false);\n  }, []);\n\n  const [seconds, setSeconds] = useTimer(stateTimerStarted, timeLeft, callback);\n\n  useEffect(() => {\n    setStateTimerStarted(timerStarted);\n  }, [timerStarted]);\n\n  useEffect(() => {\n    setSeconds(timeLeft);\n  }, [id, timeLeft, setSeconds]);\n\n  useEffect(() => {\n    if (seconds === 0) {\n      showNotification(\"Timer Finished\", `Time's for ${pomodoroType} up!`);\n      // Additional logic like switching to the next task, if needed\n    }\n  }, [seconds]);\n\n  // Function to show the notification\n  const showNotification = (title, message) => {\n    const audio = new Audio(ring); // Path to your audio file\n    audio.play();\n    if (\"Notification\" in window) {\n      Notification.requestPermission().then((permission) => {\n        if (permission === \"granted\") {\n          const notification = new Notification(title, {\n            body: message,\n            icon: \"/path/to/notification-icon.png\", // Set the path to your notification icon\n            volume: 0,\n          });\n  \n          // Auto-dismiss the notification after 10 seconds\n          setTimeout(() => {\n            notification.close();\n          }, 5000); // 10000 milliseconds = 10 seconds\n        }\n      });\n    }\n  };\n\n  const timerString = formatSecondsIntoMinutesAndSeconds(seconds);\n  return (\n    <>\n      <div className=\"timer-label\">{timerString}</div>\n      <EndTime\n        buttonColor={theme.background}\n        timerStarted={stateTimerStarted}\n        setTimerStarted={(prev) => setStateTimerStarted(prev)}\n        id={id}\n        timeLeft={timeLeft}\n        seconds={seconds}\n        pomodoroType={pomodoroType}\n      />\n    </>\n  );\n});\n\nexport default TaskTimer;\n","export default __webpack_public_path__ + \"static/media/walpaper.e4a54560.jpg\";","import { useState, useEffect, useContext, memo } from \"react\";\nimport { PomodoroContext } from \"../context/PomodoroContext\";\nimport TaskType from \"./task-components/TaskType\";\nimport TaskDetails from \"./task-components/TaskDetails\";\nimport TaskTimer from \"./task-components/TaskTimer\";\nimport background from \"../images/walpaper.jpg\";\nimport { timerContext } from \"../App\";\n\nconst ACTIVE_TASK_DEFAULT = { id: -1, timeLeft: 1500, timerStarted: false };\n\nconst MainTask = memo((props) => {\n  const { activeTaskId, tasks, dispatch } = useContext(PomodoroContext);\n  const [activeTask, setActiveTask] = useState(ACTIVE_TASK_DEFAULT);\n  const [pomodoroType, setPomodoroType] = useState(\"pomodoro\");\n  const { timeLeft, id, task, taskNo, taskCount, timerStarted, completed } =\n    activeTask;\n  const { themes } = props;\n  const { short, long, study, revise } = useContext(timerContext);\n  console.log(props)\n\n  // if there is an active task, i.e. the timer is running, then store the data inside the activeTask hook\n  useEffect(() => {\n    if (activeTaskId !== -1) {\n      setActiveTask(tasks.filter((row) => row.id === activeTaskId)[0]);\n    } else {\n    }\n  }, [activeTaskId, tasks]);\n\n  // when task is completed i.e. timer has reached 0 seconds or via button, show the short break option\n  useEffect(() => {\n    if (completed) {\n      setPomodoroType(\"short_break\");\n    }\n  }, [completed]);\n\n  // if type is changed from pomodoro to short break or study break, reset the active task\n  useEffect(() => {\n    if (\n      id &&\n      id !== -1 &&\n      (pomodoroType === \"long_break\" || pomodoroType === \"short_break\" || pomodoroType === \"revision\" )\n    ) {\n      dispatch({ type: \"resetted_active_task\" });\n      setActiveTask(ACTIVE_TASK_DEFAULT);\n    }\n  }, [pomodoroType, id, dispatch]);\n\n  useEffect(() => {\n    if (id === -1) {\n      if (pomodoroType === \"pomodoro\") {\n        setActiveTask((task) => ({ ...task, timeLeft: study }));\n      } else if (pomodoroType === \"short_break\") {\n        setActiveTask((task) => ({ ...task, timeLeft: short }));\n      } else if (pomodoroType === \"long_break\") {\n        setActiveTask((task) => ({ ...task, timeLeft: long }));\n      } else if (pomodoroType === \"revision\") {\n        setActiveTask((task) => ({ ...task, timeLeft: revise }));\n      }\n    }\n  }, [pomodoroType, id]);\n\n  // whenever there is no active task, i.e. a task from the grid is not active, then default to pomodoro option\n  useEffect(() => {\n    if (activeTaskId !== -1) {\n      setPomodoroType(\"pomodoro\");\n    }\n  }, [activeTaskId]);\n\n  return (\n    <div\n      className=\"main-task-background\"\n      style={{ backgroundImage: `url(${background})` }}\n    >\n      <div className=\"main-task-container\">\n        <TaskType\n          timerStarted={timerStarted}\n          pomodoroType={pomodoroType}\n          setPomodoroType={(type) => setPomodoroType(type)}\n        />\n        <TaskDetails\n          pomodosroType={pomodoroType}\n          id={id}\n          theme={themes[pomodoroType]}\n          task={task ? `${task} (${taskNo}/${taskCount})` : undefined}\n        />\n        <TaskTimer\n          timeLeft={timeLeft}\n          id={id}\n          timerStarted={timerStarted}\n          pomodoroType={pomodoroType}\n          theme={themes[pomodoroType]}\n        />\n      </div>\n    </div>\n  );\n});\nexport default MainTask;\n","import \"./App.css\";\nimport MainTask from \"./components/MainTask\";\nimport { useMemo, useRef, useEffect } from \"react\";\nimport { PomodoroProvider } from \"./context/PomodoroContext\";\nimport SaveButton from \"./components/SaveButton\";\nimport React from \"react\";\nconst getQuote = require(\"randoquoter\");\n\nexport const timerContext = React.createContext();\n\nconst defaultTimerValue = {\n  study: 1500,\n  short: 300,\n  long: 900,\n  revise: 301,\n  bell: true,\n  notification: true,\n  whiteNoise: true,\n  motivation: true,\n  quotes: true,\n};\n\nconst App = () => {\n  const gridRef = useRef(null);\n\n  const themes = useMemo(\n    () => ({\n      pomodoro: {\n        foreground: \"#ffffff\",\n        background: \"#d95550\",\n      },\n      short_break: {\n        foreground: \"#ffffff\",\n        background: \"#019b3c\",\n      },\n      long_break: {\n        foreground: \"#ffffff\",\n        background: \"#ab47bc\",\n      },\n      completed: {\n        foreground: \"#ffffff\",\n        background: \"#4caf50\",\n      },\n      revision: {\n        foreground: \"#ffffff\",\n        background: \"#b25701\",\n      },\n    }),\n    []\n  );\n\n  // Check local storage for saved timer values\n  const savedTimerValues = JSON.parse(localStorage.getItem(\"timerValues\"));\n\n  // Use saved timer values if present, otherwise use defaultTimerValue\n  const initialTimerValue = savedTimerValues || defaultTimerValue;\n\n  // Set initial timer values in local storage if not present\n  useEffect(() => {\n    if (!savedTimerValues) {\n      localStorage.setItem(\"timerValues\", JSON.stringify(defaultTimerValue));\n    }\n  }, []);\n\n  const quote = getQuote.getRandomQuote();\n\n  return (\n    <>\n      <timerContext.Provider value={initialTimerValue}>\n        <PomodoroProvider>\n          <MainTask themes={themes} />\n        </PomodoroProvider>\n        <div className=\"quote-container\">\n          <div className=\"quote\">\n            <p>\n              <q>{quote.text}</q>\n            </p>\n            <div className=\"author\">{quote.author}</div>\n          </div>\n        </div>\n      </timerContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}